# Etherscan API
eth_scan_helper_doc='
Terminal command implementation for etherscan APIs.

Usage: ethscan <COMMAND>

Commands:
    contracts etherscan contracts apis
    proxy   etherscan Geth/Parity Proxy module
'
ethscan() {
    cmd=$1
    if [[ -z "$cmd" ]]; then
        echo $eth_scan_helper_doc
    else
        case $cmd in
            "contracts")
                sub_cmd=$2
                if [[ -z "$sub_cmd" ]]; then
                    echo $eth_scan_contracts_helper_doc
                else
                    args=$3
                    if [[ -z "$args" ]]; then
                        echo $eth_scan_contracts_helper_doc
                    else
                        case $sub_cmd in
                            "abi")
                                echo $(_get_abi $args)
                            ;;
                            "src")
                                echo "TBD"
                            ;;
                            "creation")
                                echo $(_get_creation $args)
                            ;;
                            "creation_time")
                                echo $(_get_creation_time $args)
                            ;;
                        esac;
                    fi        
                fi
            ;;
            "proxy") 
                sub_cmd=$2
                if [[ -z "$sub_cmd" ]]; then
                    echo $eth_scan_proxy_helper_doc
                else
                    latestBlockNumber=$(_get_eth_block)
                    if [[ -z "$latestBlockNumber" ]]; then
                        echo -e "Error: failed to call eth_blockNumber"
                        break
                    fi
                    echo "[eth_blockNumber] latest block number: ${latestBlockNumber}"
                fi
            ;;
            *);;
        esac;
    fi
}

# module: Accounts (https://docs.etherscan.io/api-endpoints/accounts)
# action: txlist

# action: txlistinternal

# module: Contracts (https://docs.etherscan.io/api-endpoints/contracts)
eth_scan_contracts_helper_doc='
Usage:
    ethscan contracts abi <ADDRESS>
    ethscan contracts src <ADDRESS>
    ethscan contracts creation <ADDRESSES>
    ethscan contracts creation_time <ADDRESS>
    
    Note: <ADDRESSES> = <ADDRESS_0>,<ADDRESS_1>,...
'
# action: getabi
_get_abi() {
    address=$1
    output=$(curl -s -X GET "https://api.etherscan.io/api?module=contract&action=getabi&address=${address}&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
    msg=$(echo $output | jq -r '.message')
    if [[ "$msg" == "OK" ]]; then
        result=$(echo $output | jq -r '.result')
        echo $result
    else
        echo ""
    fi
}

# _get_source_code() {
#     address=$1
#     output_raw=$(curl -s -X GET "https://api.etherscan.io/api?module=contract&action=getsourcecode&address=${address}&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
#     output=$(echo $output_raw | sed 's/[\x00-\x1F\x7F]//g')
#     status=$(echo $output | jq -r '.status')
#     if [[ "$status" == "1" ]]; then
#         result=$(echo $output | jq -r '.result')
#         echo $result
#     else
#         echo ""
#     fi
# }

_get_creation() {
    addresses=$1
    output=$(curl -s -X GET "https://api.etherscan.io/api?module=contract&action=getcontractcreation&contractaddresses=${addresses}&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
        msg=$(echo $output | jq -r '.message')
    if [[ "$msg" == "OK" ]]; then
        result=$(echo $output | jq -r '.result')
        echo $result
    else
        echo ""
    fi
}

_get_creation_time() {
    address=$1
    creation_info=$(_get_creation $address)
    if [[ -n "$creation_info" ]]; then
        creation_tx=$(echo $creation_info | jq -r '.[0].txHash')
        block_number_hex=$(cast tx --rpc-url $web3sh_ANKR_ETH -j $creation_tx | jq -r '.blockNumber')
        block_number=$(printf "%d" $block_number_hex)
        
        echo $block_number
    else
        echo ""
    fi
}

# module: Transactions ()

# module: proxy (https://docs.etherscan.io/api-endpoints/geth-parity-proxy)
eth_scan_proxy_helper_doc='
Usage:
    ethscan proxy <API_METHOD> <API_ARGUMENTS>

Example for Supported API_METHOD:
    ethscan proxy blockNumber
'
# action: eth_blockNumber
_get_eth_block() {
    output=$(curl -s -X GET "https://api.etherscan.io/api?module=proxy&action=eth_blockNumber&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
    result_hex=$(echo $output | jq -r '.result')

    if [[ $result_hex =~ ^0x[0-9a-fA-F]+$ ]]; then
        result_dec=$(printf "%d" $result_hex)
        echo $result_dec
    else
        echo ""
    fi
}

# Get Ether Last Price: https://docs.etherscan.io/api-endpoints/stats-1#get-ether-last-price
get_eth_price() {
    output=$(curl -s -X GET "https://api.etherscan.io/api?module=stats&action=ethprice&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
    usdTimestamp=$(echo $output | jq '.result.ethusd_timestamp' | tr -d '"')
    usdPrice=$(echo $output | jq '.result.ethusd' | tr -d '"')
    btcTimestamp=$(echo $output | jq '.result.ethbtc_timestamp' | tr -d '"')
    btcPrice=$(echo $output | jq '.result.ethbtc' | tr -d '"')    

    echo "ETH/USD (@${usdTimestamp}): \$${usdPrice}"
    echo "ETH/BTC (@${btcTimestamp}): ${btcPrice}"
}

_get_eth_usd_price() {
    output=$(curl -s -X GET "https://api.etherscan.io/api?module=stats&action=ethprice&apikey=${web3sh_ETHERSCAN_API_KEY_0}")
    usdPrice=$(echo $output | jq '.result.ethusd' | tr -d '"')
    
    printf "%.2f\n" $usdPrice
}


# Block native api
# cgas: swap (estimated price for gas of the UniversalRouter.execute)
cgas() {
    local type=$1
    output=$(curl -s -H \"Authorization: ${BLOCK_NATIVE_KEY}\" https://api.blocknative.com/gasprices/blockprices | jq '{blockNumber: .blockPrices[0].blockNumber, baseFeePerGas: .blockPrices[0].baseFeePerGas, estimatedPrice: .blockPrices[0].estimatedPrices[0]}')
    blockNumber=$(echo "$output" | jq '.blockNumber')
    baseFeePerGas=$(echo "$output" | jq '.baseFeePerGas')
    # confidence=$(echo "$output" | jq '.estimatedPrice.confidence')
    price=$(echo "$output" | jq '.estimatedPrice.price')
    maxPriorityFeePerGas=$(echo "$output" | jq '.estimatedPrice.maxPriorityFeePerGas')
    maxFeePerGas=$(echo "$output" | jq '.estimatedPrice.maxFeePerGas')
    echo "\033[31mblock.number\033[0m: ${blockNumber}"
    echo "\033[34mgasPrice\033[0m: ${price} (99%)"
    echo "\033[90m  # baseFee = ${baseFeePerGas}, maxFee = ${maxFeePerGas}, priorityFee = ${maxPriorityFeePerGas}\033[0m"
    
    if [ ! -z "$type" ]; then
        # avg_cost = 200,000
        case $type in
            "swap")
                eth_price=$(_get_eth_usd_price)
                cost_min="0$(echo "scale=5; (${maxFeePerGas} + ${maxPriorityFeePerGas}) * 120000.0 / 1000000000.0" | bc)"
                cost_min_value=$(echo "scale=2; ${cost_min} * ${eth_price}" | bc)
                cost_max="0$(echo "scale=5; (${maxFeePerGas} + ${maxPriorityFeePerGas}) * 200000.0 / 1000000000.0" | bc)"
                cost_max_value=$(echo "scale=2; ${cost_max} * ${eth_price}" | bc)
                echo "\033[35mswap estimated\033[0m: ${cost_min} (120,000) - ${cost_max} (200,000) ETH"
                echo "\033[90m  # \$${cost_min_value} (120,000) - \$${cost_max_value} (200,000) ETH@${eth_price}\033[0m"
            ;;
        esac
    fi
}