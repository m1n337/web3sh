#!/usr/bin/env python

import json
import requests

DEFAULT_ETHERSCAN_API_URL="https://api.etherscan.io/api"

class Etherscan:

    def __init__(self, api_key_pool, api_url=DEFAULT_ETHERSCAN_API_URL) -> None:
        self.base_api_url = api_url
        self.api_key_pool = api_key_pool
        self._currenty_api_key_index = 0

    @property
    def api_key(self):
        return self.api_key_pool[self._currenty_api_key_index]
    
    def next_api_key(self):
        num_keys = len(self.api_key_pool)
        self._currenty_api_key_index = (self._currenty_api_key_index + 1) % num_keys
        
    # module: Accounts
    def _account_txlist(self, address):
        creation_block = self.__contract_getcontractcreation_block(address)
        latest_block = self._proxy_eth_blockNumber()
        ONE_WEEK_BLOCKS = 40000
        INTERVAL_BLOCKS = 10000
        end_block = latest_block - ONE_WEEK_BLOCKS
        if creation_block >= end_block:
            end_block = creation_block

        res = []
        for i in range(latest_block, end_block, -INTERVAL_BLOCKS):
            # [i, i + 10,000]
            data = self.send(module="account", action="txlist", 
                address=address, 
                startblock=i, 
                endblock=i+INTERVAL_BLOCKS, 
                page=1, 
                offset=10, 
                sort='desc',
            )
            if data:
                res.extend(data)
        
        return res

    def _account_txlistinternal(self, address):
        creation_block = self.__contract_getcontractcreation_block(address)
        latest_block = self._proxy_eth_blockNumber()
        HALF_WEEK_BLOCKS = 20000
        INTERVAL_BLOCKS = 5000
        end_block = latest_block - HALF_WEEK_BLOCKS
        if creation_block >= end_block:
            end_block = creation_block
        res = []
        for i in range(latest_block, end_block, -INTERVAL_BLOCKS):
            # [i, i + 10,000]
            data = self.send(module="account", action="txlistinternal", 
                address=address, 
                startblock=i, 
                endblock=i+INTERVAL_BLOCKS, 
                page=1, 
                offset=10, 
                sort='desc',
            )
            if data:
                res.extend(data)
        
        return res

    # module: Contracts (https://docs.etherscan.io/api-endpoints/contracts)
    def _contract_getcontractcreation(self, addresses):
        try:
            return self.send(module="contract", action="getcontractcreation", contractaddresses=addresses)
        except Exception as e:
            print(e)
        
    def __contract_getcontractcreation_block(self, address):
        try:
            res = self._contract_getcontractcreation(address)
            tx = res[0]['txHash']
            block = self.__proxy_eth_getTransactionByHash_block(tx)

            return block
        except:
            pass

    def _contract_getabi(self, address):
        try:
            return self.send(module="contract", action="getabi", address=address)
        except:
            pass

    def _contract_getsourcecode(self, address):
        try:
            return self.send(module="contract", action="getsourcecode", address=address)
        except:
            pass

    # module: Geth/Parity Proxy (https://docs.etherscan.io/api-endpoints/geth-parity-proxy)
    def _proxy_eth_blockNumber(self):
        data = self.send_rpc(module="proxy", action="eth_blockNumber")
        
        return int(data, 16) 

    def _proxy_eth_getTransactionByHash(self, txhash):
        data = self.send_rpc(module="proxy", action="eth_getTransactionByHash", txhash=txhash)

        return data
    
    def __proxy_eth_getTransactionByHash_block(self, txhash):
        data = self.send_rpc(module="proxy", action="eth_getTransactionByHash", txhash=txhash)

        return int(data['blockNumber'], 16)

    # utils
    def _send(self, module, action, params):
        params["module"] = module
        params["action"] = action
        params["apikey"] = self.api_key

        res = requests.get(
            self.base_api_url,
            params=params
        ).json()

        return res

    def send(self, module, action, **params):
        
        res = self._send(module=module, action=action, params=params)
        if res["message"] == "OK":
            return res["result"]
        else:
            return None
    
    def send_rpc(self, module, action, **params):
        
        res = self._send(module=module, action=action, params=params)

        try:
            result = res['result']
            if not result:
                return None
            
            return result
        except:
            return None

def main():
    ethscan = Etherscan(
        api_key_pool=["API_KEY"]
    )

    # print("_accounts_txlist: ", ethscan._accounts_txlist("0xc5102fE9359FD9a28f877a67E36B0F050d81a3CC"))

    # print("_contract_getcontractcreation: ", ethscan._contract_getcontractcreation("0xB83c27805aAcA5C7082eB45C868d955Cf04C337F"))
    # print("_contract_getcontractcreation: ", ethscan._contract_getcontractcreation("0xB83c27805aAcA5C7082eB45C868d955Cf04C337F,0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45,0xe4462eb568E2DFbb5b0cA2D3DbB1A35C9Aa98aad,0xdAC17F958D2ee523a2206206994597C13D831ec7,0xf5b969064b91869fBF676ecAbcCd1c5563F591d0"))
    # print("_Etherscan__contract_getcontractcreation_block: ", ethscan._Etherscan__contract_getcontractcreation_block("0xB83c27805aAcA5C7082eB45C868d955Cf04C337F"))
    # print("_contract_getabi: ", ethscan._contract_getabi("0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413"))
    # print("_contract_getsourcecode: ", ethscan._contract_getsourcecode("0xBB9bc244D798123fDe783fCc1C72d3Bb8C189413"))

    # # proxy:
    # print("_proxy_eth_blockNumber: ", ethscan._proxy_eth_blockNumber())

if __name__ == "__main__":
    main()